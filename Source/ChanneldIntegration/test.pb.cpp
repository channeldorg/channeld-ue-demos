// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifdef _MSC_VER
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#	pragma warning(disable: 4946)
#endif

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace testpb {
PROTOBUF_CONSTEXPR TestChannelDataMessage::TestChannelDataMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestChannelDataMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestChannelDataMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestChannelDataMessageDefaultTypeInternal() {}
  union {
    TestChannelDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestChannelDataMessageDefaultTypeInternal _TestChannelDataMessage_default_instance_;
PROTOBUF_CONSTEXPR TestAnyMessage_Type1::TestAnyMessage_Type1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAnyMessage_Type1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAnyMessage_Type1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAnyMessage_Type1DefaultTypeInternal() {}
  union {
    TestAnyMessage_Type1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAnyMessage_Type1DefaultTypeInternal _TestAnyMessage_Type1_default_instance_;
PROTOBUF_CONSTEXPR TestAnyMessage_Type2::TestAnyMessage_Type2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAnyMessage_Type2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAnyMessage_Type2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAnyMessage_Type2DefaultTypeInternal() {}
  union {
    TestAnyMessage_Type2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAnyMessage_Type2DefaultTypeInternal _TestAnyMessage_Type2_default_instance_;
PROTOBUF_CONSTEXPR TestAnyMessage::TestAnyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.msg_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAnyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAnyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAnyMessageDefaultTypeInternal() {}
  union {
    TestAnyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAnyMessageDefaultTypeInternal _TestAnyMessage_default_instance_;
PROTOBUF_CONSTEXPR TestMergeMessage_StringWrapper::TestMergeMessage_StringWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMergeMessage_StringWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMergeMessage_StringWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMergeMessage_StringWrapperDefaultTypeInternal() {}
  union {
    TestMergeMessage_StringWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMergeMessage_StringWrapperDefaultTypeInternal _TestMergeMessage_StringWrapper_default_instance_;
PROTOBUF_CONSTEXPR TestMergeMessage_KvEntry_DoNotUse::TestMergeMessage_KvEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMergeMessage_KvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMergeMessage_KvEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMergeMessage::TestMergeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.kv_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMergeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMergeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMergeMessageDefaultTypeInternal() {}
  union {
    TestMergeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMergeMessageDefaultTypeInternal _TestMergeMessage_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage_KvEntry_DoNotUse::TestMapMessage_KvEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapMessage_KvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMapMessage_KvEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage_StringWrapper::TestMapMessage_StringWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMapMessage_StringWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessage_StringWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessage_StringWrapperDefaultTypeInternal() {}
  union {
    TestMapMessage_StringWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessage_StringWrapperDefaultTypeInternal _TestMapMessage_StringWrapper_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage_Kv2Entry_DoNotUse::TestMapMessage_Kv2Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapMessage_Kv2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestMapMessage_Kv2Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage_NullableWrapper::TestMapMessage_NullableWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_)*/int64_t{0}} {}
struct TestMapMessage_NullableWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessage_NullableWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessage_NullableWrapperDefaultTypeInternal() {}
  union {
    TestMapMessage_NullableWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessage_NullableWrapperDefaultTypeInternal _TestMapMessage_NullableWrapper_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage_Kv3Entry_DoNotUse::TestMapMessage_Kv3Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMapMessage_Kv3Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessage_Kv3Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessage_Kv3Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapMessage_Kv3Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessage_Kv3Entry_DoNotUseDefaultTypeInternal _TestMapMessage_Kv3Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapMessage::TestMapMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.kv2_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.kv3_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMapMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapMessageDefaultTypeInternal() {}
  union {
    TestMapMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapMessageDefaultTypeInternal _TestMapMessage_default_instance_;
PROTOBUF_CONSTEXPR TestFieldMaskMessage_NestedMessage::TestFieldMaskMessage_NestedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p1_)*/int64_t{0}
  , /*decltype(_impl_.p2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestFieldMaskMessage_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldMaskMessage_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldMaskMessage_NestedMessageDefaultTypeInternal() {}
  union {
    TestFieldMaskMessage_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldMaskMessage_NestedMessageDefaultTypeInternal _TestFieldMaskMessage_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv1Entry_DoNotUse::TestFieldMaskMessage_Kv1Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestFieldMaskMessage_Kv1Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv2Entry_DoNotUse::TestFieldMaskMessage_Kv2Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestFieldMaskMessage_Kv2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestFieldMaskMessage::TestFieldMaskMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.kv1_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.kv2_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestFieldMaskMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldMaskMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldMaskMessageDefaultTypeInternal() {}
  union {
    TestFieldMaskMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldMaskMessageDefaultTypeInternal _TestFieldMaskMessage_default_instance_;
}  // namespace testpb
static ::_pb::Metadata file_level_metadata_test_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestChannelDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestChannelDataMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestChannelDataMessage, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage_Type1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage_Type1, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage_Type2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage_Type2, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestAnyMessage, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_StringWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_StringWrapper, _impl_.removed_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_StringWrapper, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_KvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_KvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_KvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage_KvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMergeMessage, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_KvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_KvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_KvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_KvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_StringWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_StringWrapper, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_StringWrapper, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_NullableWrapper, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_NullableWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_NullableWrapper, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_NullableWrapper, _impl_.num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv3Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv3Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv3Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage_Kv3Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage, _impl_.kv2_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestMapMessage, _impl_.kv3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_NestedMessage, _impl_.p1_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_NestedMessage, _impl_.p2_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _impl_.kv1_),
  PROTOBUF_FIELD_OFFSET(::testpb::TestFieldMaskMessage, _impl_.kv2_),
};
static const ::_pbi::MigrationSchema schemas_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::testpb::TestChannelDataMessage)},
  { 8, -1, -1, sizeof(::testpb::TestAnyMessage_Type1)},
  { 15, -1, -1, sizeof(::testpb::TestAnyMessage_Type2)},
  { 22, -1, -1, sizeof(::testpb::TestAnyMessage)},
  { 30, -1, -1, sizeof(::testpb::TestMergeMessage_StringWrapper)},
  { 38, 46, -1, sizeof(::testpb::TestMergeMessage_KvEntry_DoNotUse)},
  { 48, -1, -1, sizeof(::testpb::TestMergeMessage)},
  { 56, 64, -1, sizeof(::testpb::TestMapMessage_KvEntry_DoNotUse)},
  { 66, -1, -1, sizeof(::testpb::TestMapMessage_StringWrapper)},
  { 74, 82, -1, sizeof(::testpb::TestMapMessage_Kv2Entry_DoNotUse)},
  { 84, 92, -1, sizeof(::testpb::TestMapMessage_NullableWrapper)},
  { 94, 102, -1, sizeof(::testpb::TestMapMessage_Kv3Entry_DoNotUse)},
  { 104, -1, -1, sizeof(::testpb::TestMapMessage)},
  { 113, -1, -1, sizeof(::testpb::TestFieldMaskMessage_NestedMessage)},
  { 121, 129, -1, sizeof(::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse)},
  { 131, 139, -1, sizeof(::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse)},
  { 141, -1, -1, sizeof(::testpb::TestFieldMaskMessage)},
};

static const ::_pb::Message* const file_default_instances_test_2eproto[] = {
  &::testpb::_TestChannelDataMessage_default_instance_._instance,
  &::testpb::_TestAnyMessage_Type1_default_instance_._instance,
  &::testpb::_TestAnyMessage_Type2_default_instance_._instance,
  &::testpb::_TestAnyMessage_default_instance_._instance,
  &::testpb::_TestMergeMessage_StringWrapper_default_instance_._instance,
  &::testpb::_TestMergeMessage_KvEntry_DoNotUse_default_instance_._instance,
  &::testpb::_TestMergeMessage_default_instance_._instance,
  &::testpb::_TestMapMessage_KvEntry_DoNotUse_default_instance_._instance,
  &::testpb::_TestMapMessage_StringWrapper_default_instance_._instance,
  &::testpb::_TestMapMessage_Kv2Entry_DoNotUse_default_instance_._instance,
  &::testpb::_TestMapMessage_NullableWrapper_default_instance_._instance,
  &::testpb::_TestMapMessage_Kv3Entry_DoNotUse_default_instance_._instance,
  &::testpb::_TestMapMessage_default_instance_._instance,
  &::testpb::_TestFieldMaskMessage_NestedMessage_default_instance_._instance,
  &::testpb::_TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_._instance,
  &::testpb::_TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_._instance,
  &::testpb::_TestFieldMaskMessage_default_instance_._instance,
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\006testpb\032\031google/protobuf/an"
  "y.proto\"3\n\026TestChannelDataMessage\022\014\n\004tex"
  "t\030\001 \001(\t\022\013\n\003num\030\002 \001(\r\"\207\001\n\016TestAnyMessage\022"
  "!\n\003msg\030\001 \001(\0132\024.google.protobuf.Any\022\"\n\004li"
  "st\030\002 \003(\0132\024.google.protobuf.Any\032\026\n\005Type1\022"
  "\r\n\005value\030\001 \001(\t\032\026\n\005Type2\022\r\n\005value\030\001 \001(\003\"\324"
  "\001\n\020TestMergeMessage\022\014\n\004list\030\001 \003(\t\022,\n\002kv\030"
  "\002 \003(\0132 .testpb.TestMergeMessage.KvEntry\032"
  "1\n\rStringWrapper\022\017\n\007removed\030\001 \001(\010\022\017\n\007con"
  "tent\030\002 \001(\t\032Q\n\007KvEntry\022\013\n\003key\030\001 \001(\003\0225\n\005va"
  "lue\030\002 \001(\0132&.testpb.TestMergeMessage.Stri"
  "ngWrapper:\0028\001\"\347\003\n\016TestMapMessage\022*\n\002kv\030\001"
  " \003(\0132\036.testpb.TestMapMessage.KvEntry\022,\n\003"
  "kv2\030\002 \003(\0132\037.testpb.TestMapMessage.Kv2Ent"
  "ry\022,\n\003kv3\030\003 \003(\0132\037.testpb.TestMapMessage."
  "Kv3Entry\032)\n\007KvEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\032-\n\rStringWrapper\022\017\n\007content\030"
  "\001 \001(\t\022\013\n\003num\030\002 \001(\003\032P\n\010Kv2Entry\022\013\n\003key\030\001 "
  "\001(\r\0223\n\005value\030\002 \001(\0132$.testpb.TestMapMessa"
  "ge.StringWrapper:\0028\001\032M\n\017NullableWrapper\022"
  "\024\n\007content\030\001 \001(\tH\000\210\001\001\022\020\n\003num\030\002 \001(\003H\001\210\001\001B"
  "\n\n\010_contentB\006\n\004_num\032R\n\010Kv3Entry\022\013\n\003key\030\001"
  " \001(\r\0225\n\005value\030\002 \001(\0132&.testpb.TestMapMess"
  "age.NullableWrapper:\0028\001\"\254\003\n\024TestFieldMas"
  "kMessage\022\014\n\004name\030\001 \001(\t\0227\n\003msg\030\002 \001(\0132*.te"
  "stpb.TestFieldMaskMessage.NestedMessage\022"
  "8\n\004list\030\003 \003(\0132*.testpb.TestFieldMaskMess"
  "age.NestedMessage\0222\n\003kv1\030\004 \003(\0132%.testpb."
  "TestFieldMaskMessage.Kv1Entry\0222\n\003kv2\030\005 \003"
  "(\0132%.testpb.TestFieldMaskMessage.Kv2Entr"
  "y\032\'\n\rNestedMessage\022\n\n\002p1\030\001 \001(\003\022\n\n\002p2\030\002 \001"
  "(\r\032V\n\010Kv1Entry\022\013\n\003key\030\001 \001(\003\0229\n\005value\030\002 \001"
  "(\0132*.testpb.TestFieldMaskMessage.NestedM"
  "essage:\0028\001\032*\n\010Kv2Entry\022\013\n\003key\030\001 \001(\003\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001B,Z*github.com/channeldorg"
  "/channeld/pkg/testpbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_test_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_test_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false, false, 1428, descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once, descriptor_table_test_2eproto_deps, 1, 17,
    schemas_test_2eproto, file_default_instances_test_2eproto, TableStruct_test_2eproto::offsets,
    file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace testpb {

// ===================================================================

class TestChannelDataMessage::_Internal {
 public:
};

TestChannelDataMessage::TestChannelDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestChannelDataMessage)
}
TestChannelDataMessage::TestChannelDataMessage(const TestChannelDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestChannelDataMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:testpb.TestChannelDataMessage)
}

inline void TestChannelDataMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestChannelDataMessage::~TestChannelDataMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestChannelDataMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestChannelDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TestChannelDataMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestChannelDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestChannelDataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestChannelDataMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestChannelDataMessage.text"));
        } else
          goto handle_unusual;
        continue;
      // uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestChannelDataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestChannelDataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestChannelDataMessage.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestChannelDataMessage)
  return target;
}

size_t TestChannelDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestChannelDataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestChannelDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestChannelDataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestChannelDataMessage::GetClassData() const { return &_class_data_; }


void TestChannelDataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestChannelDataMessage*>(&to_msg);
  auto& from = static_cast<const TestChannelDataMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestChannelDataMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestChannelDataMessage::CopyFrom(const TestChannelDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestChannelDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChannelDataMessage::IsInitialized() const {
  return true;
}

void TestChannelDataMessage::InternalSwap(TestChannelDataMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestChannelDataMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

class TestAnyMessage_Type1::_Internal {
 public:
};

TestAnyMessage_Type1::TestAnyMessage_Type1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestAnyMessage.Type1)
}
TestAnyMessage_Type1::TestAnyMessage_Type1(const TestAnyMessage_Type1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAnyMessage_Type1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:testpb.TestAnyMessage.Type1)
}

inline void TestAnyMessage_Type1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestAnyMessage_Type1::~TestAnyMessage_Type1() {
  // @@protoc_insertion_point(destructor:testpb.TestAnyMessage.Type1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAnyMessage_Type1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void TestAnyMessage_Type1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAnyMessage_Type1::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestAnyMessage.Type1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAnyMessage_Type1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestAnyMessage.Type1.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAnyMessage_Type1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestAnyMessage.Type1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestAnyMessage.Type1.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestAnyMessage.Type1)
  return target;
}

size_t TestAnyMessage_Type1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestAnyMessage.Type1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAnyMessage_Type1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAnyMessage_Type1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAnyMessage_Type1::GetClassData() const { return &_class_data_; }


void TestAnyMessage_Type1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAnyMessage_Type1*>(&to_msg);
  auto& from = static_cast<const TestAnyMessage_Type1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestAnyMessage.Type1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAnyMessage_Type1::CopyFrom(const TestAnyMessage_Type1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestAnyMessage.Type1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAnyMessage_Type1::IsInitialized() const {
  return true;
}

void TestAnyMessage_Type1::InternalSwap(TestAnyMessage_Type1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAnyMessage_Type1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// ===================================================================

class TestAnyMessage_Type2::_Internal {
 public:
};

TestAnyMessage_Type2::TestAnyMessage_Type2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestAnyMessage.Type2)
}
TestAnyMessage_Type2::TestAnyMessage_Type2(const TestAnyMessage_Type2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAnyMessage_Type2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:testpb.TestAnyMessage.Type2)
}

inline void TestAnyMessage_Type2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestAnyMessage_Type2::~TestAnyMessage_Type2() {
  // @@protoc_insertion_point(destructor:testpb.TestAnyMessage.Type2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAnyMessage_Type2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAnyMessage_Type2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAnyMessage_Type2::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestAnyMessage.Type2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAnyMessage_Type2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAnyMessage_Type2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestAnyMessage.Type2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestAnyMessage.Type2)
  return target;
}

size_t TestAnyMessage_Type2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestAnyMessage.Type2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAnyMessage_Type2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAnyMessage_Type2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAnyMessage_Type2::GetClassData() const { return &_class_data_; }


void TestAnyMessage_Type2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAnyMessage_Type2*>(&to_msg);
  auto& from = static_cast<const TestAnyMessage_Type2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestAnyMessage.Type2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAnyMessage_Type2::CopyFrom(const TestAnyMessage_Type2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestAnyMessage.Type2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAnyMessage_Type2::IsInitialized() const {
  return true;
}

void TestAnyMessage_Type2::InternalSwap(TestAnyMessage_Type2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAnyMessage_Type2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[2]);
}

// ===================================================================

class TestAnyMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& msg(const TestAnyMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
TestAnyMessage::_Internal::msg(const TestAnyMessage* msg) {
  return *msg->_impl_.msg_;
}
void TestAnyMessage::clear_msg() {
  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
}
void TestAnyMessage::clear_list() {
  _impl_.list_.Clear();
}
TestAnyMessage::TestAnyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestAnyMessage)
}
TestAnyMessage::TestAnyMessage(const TestAnyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAnyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.msg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:testpb.TestAnyMessage)
}

inline void TestAnyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.msg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestAnyMessage::~TestAnyMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestAnyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAnyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void TestAnyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAnyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestAnyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAnyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAnyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestAnyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any msg = 1;
  if (this->_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestAnyMessage)
  return target;
}

size_t TestAnyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestAnyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any msg = 1;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAnyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAnyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAnyMessage::GetClassData() const { return &_class_data_; }


void TestAnyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAnyMessage*>(&to_msg);
  auto& from = static_cast<const TestAnyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestAnyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAnyMessage::CopyFrom(const TestAnyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestAnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAnyMessage::IsInitialized() const {
  return true;
}

void TestAnyMessage::InternalSwap(TestAnyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAnyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[3]);
}

// ===================================================================

class TestMergeMessage_StringWrapper::_Internal {
 public:
};

TestMergeMessage_StringWrapper::TestMergeMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestMergeMessage.StringWrapper)
}
TestMergeMessage_StringWrapper::TestMergeMessage_StringWrapper(const TestMergeMessage_StringWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMergeMessage_StringWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.removed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.removed_ = from._impl_.removed_;
  // @@protoc_insertion_point(copy_constructor:testpb.TestMergeMessage.StringWrapper)
}

inline void TestMergeMessage_StringWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.removed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMergeMessage_StringWrapper::~TestMergeMessage_StringWrapper() {
  // @@protoc_insertion_point(destructor:testpb.TestMergeMessage.StringWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMergeMessage_StringWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestMergeMessage_StringWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMergeMessage_StringWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestMergeMessage.StringWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.removed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMergeMessage_StringWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool removed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestMergeMessage.StringWrapper.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMergeMessage_StringWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestMergeMessage.StringWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_removed(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestMergeMessage.StringWrapper.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestMergeMessage.StringWrapper)
  return target;
}

size_t TestMergeMessage_StringWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestMergeMessage.StringWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMergeMessage_StringWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMergeMessage_StringWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMergeMessage_StringWrapper::GetClassData() const { return &_class_data_; }


void TestMergeMessage_StringWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMergeMessage_StringWrapper*>(&to_msg);
  auto& from = static_cast<const TestMergeMessage_StringWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestMergeMessage.StringWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMergeMessage_StringWrapper::CopyFrom(const TestMergeMessage_StringWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestMergeMessage.StringWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMergeMessage_StringWrapper::IsInitialized() const {
  return true;
}

void TestMergeMessage_StringWrapper::InternalSwap(TestMergeMessage_StringWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.removed_, other->_impl_.removed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMergeMessage_StringWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[4]);
}

// ===================================================================

TestMergeMessage_KvEntry_DoNotUse::TestMergeMessage_KvEntry_DoNotUse() {}
TestMergeMessage_KvEntry_DoNotUse::TestMergeMessage_KvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMergeMessage_KvEntry_DoNotUse::MergeFrom(const TestMergeMessage_KvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMergeMessage_KvEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[5]);
}

// ===================================================================

class TestMergeMessage::_Internal {
 public:
};

TestMergeMessage::TestMergeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMergeMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:testpb.TestMergeMessage)
}
TestMergeMessage::TestMergeMessage(const TestMergeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMergeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_.kv_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  // @@protoc_insertion_point(copy_constructor:testpb.TestMergeMessage)
}

inline void TestMergeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_.kv_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMergeMessage::~TestMergeMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestMergeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMergeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
  _impl_.kv_.Destruct();
  _impl_.kv_.~MapField();
}

void TestMergeMessage::ArenaDtor(void* object) {
  TestMergeMessage* _this = reinterpret_cast< TestMergeMessage* >(object);
  _this->_impl_.kv_.Destruct();
}
void TestMergeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMergeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestMergeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.kv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMergeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "testpb.TestMergeMessage.list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMergeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestMergeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->_internal_list_size(); i < n; i++) {
    const auto& s = this->_internal_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestMergeMessage.list");
    target = stream->WriteString(1, s, target);
  }

  // map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
  if (!this->_internal_kv().empty()) {
    using MapType = ::_pb::Map<int64_t, ::testpb::TestMergeMessage_StringWrapper>;
    using WireHelper = TestMergeMessage_KvEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestMergeMessage)
  return target;
}

size_t TestMergeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestMergeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.list_.size());
  for (int i = 0, n = _impl_.list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.list_.Get(i));
  }

  // map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >::const_iterator
      it = this->_internal_kv().begin();
      it != this->_internal_kv().end(); ++it) {
    total_size += TestMergeMessage_KvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMergeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMergeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMergeMessage::GetClassData() const { return &_class_data_; }


void TestMergeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMergeMessage*>(&to_msg);
  auto& from = static_cast<const TestMergeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestMergeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMergeMessage::CopyFrom(const TestMergeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestMergeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMergeMessage::IsInitialized() const {
  return true;
}

void TestMergeMessage::InternalSwap(TestMergeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMergeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[6]);
}

// ===================================================================

TestMapMessage_KvEntry_DoNotUse::TestMapMessage_KvEntry_DoNotUse() {}
TestMapMessage_KvEntry_DoNotUse::TestMapMessage_KvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapMessage_KvEntry_DoNotUse::MergeFrom(const TestMapMessage_KvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage_KvEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[7]);
}

// ===================================================================

class TestMapMessage_StringWrapper::_Internal {
 public:
};

TestMapMessage_StringWrapper::TestMapMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestMapMessage.StringWrapper)
}
TestMapMessage_StringWrapper::TestMapMessage_StringWrapper(const TestMapMessage_StringWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMapMessage_StringWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:testpb.TestMapMessage.StringWrapper)
}

inline void TestMapMessage_StringWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.num_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMapMessage_StringWrapper::~TestMapMessage_StringWrapper() {
  // @@protoc_insertion_point(destructor:testpb.TestMapMessage.StringWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMapMessage_StringWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestMapMessage_StringWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMapMessage_StringWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestMapMessage.StringWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMapMessage_StringWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestMapMessage.StringWrapper.content"));
        } else
          goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMapMessage_StringWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestMapMessage.StringWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestMapMessage.StringWrapper.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestMapMessage.StringWrapper)
  return target;
}

size_t TestMapMessage_StringWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestMapMessage.StringWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMapMessage_StringWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMapMessage_StringWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMapMessage_StringWrapper::GetClassData() const { return &_class_data_; }


void TestMapMessage_StringWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMapMessage_StringWrapper*>(&to_msg);
  auto& from = static_cast<const TestMapMessage_StringWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestMapMessage.StringWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMapMessage_StringWrapper::CopyFrom(const TestMapMessage_StringWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestMapMessage.StringWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMapMessage_StringWrapper::IsInitialized() const {
  return true;
}

void TestMapMessage_StringWrapper::InternalSwap(TestMapMessage_StringWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage_StringWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[8]);
}

// ===================================================================

TestMapMessage_Kv2Entry_DoNotUse::TestMapMessage_Kv2Entry_DoNotUse() {}
TestMapMessage_Kv2Entry_DoNotUse::TestMapMessage_Kv2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapMessage_Kv2Entry_DoNotUse::MergeFrom(const TestMapMessage_Kv2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage_Kv2Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[9]);
}

// ===================================================================

class TestMapMessage_NullableWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMapMessage_NullableWrapper>()._impl_._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestMapMessage_NullableWrapper::TestMapMessage_NullableWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestMapMessage.NullableWrapper)
}
TestMapMessage_NullableWrapper::TestMapMessage_NullableWrapper(const TestMapMessage_NullableWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMapMessage_NullableWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:testpb.TestMapMessage.NullableWrapper)
}

inline void TestMapMessage_NullableWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.num_){int64_t{0}}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMapMessage_NullableWrapper::~TestMapMessage_NullableWrapper() {
  // @@protoc_insertion_point(destructor:testpb.TestMapMessage.NullableWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMapMessage_NullableWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestMapMessage_NullableWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMapMessage_NullableWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestMapMessage.NullableWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_.num_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMapMessage_NullableWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestMapMessage.NullableWrapper.content"));
        } else
          goto handle_unusual;
        continue;
      // optional int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMapMessage_NullableWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestMapMessage.NullableWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string content = 1;
  if (_internal_has_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestMapMessage.NullableWrapper.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // optional int64 num = 2;
  if (_internal_has_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestMapMessage.NullableWrapper)
  return target;
}

size_t TestMapMessage_NullableWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestMapMessage.NullableWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string content = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional int64 num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMapMessage_NullableWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMapMessage_NullableWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMapMessage_NullableWrapper::GetClassData() const { return &_class_data_; }


void TestMapMessage_NullableWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMapMessage_NullableWrapper*>(&to_msg);
  auto& from = static_cast<const TestMapMessage_NullableWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestMapMessage.NullableWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_ = from._impl_.num_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMapMessage_NullableWrapper::CopyFrom(const TestMapMessage_NullableWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestMapMessage.NullableWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMapMessage_NullableWrapper::IsInitialized() const {
  return true;
}

void TestMapMessage_NullableWrapper::InternalSwap(TestMapMessage_NullableWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage_NullableWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[10]);
}

// ===================================================================

TestMapMessage_Kv3Entry_DoNotUse::TestMapMessage_Kv3Entry_DoNotUse() {}
TestMapMessage_Kv3Entry_DoNotUse::TestMapMessage_Kv3Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapMessage_Kv3Entry_DoNotUse::MergeFrom(const TestMapMessage_Kv3Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage_Kv3Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[11]);
}

// ===================================================================

class TestMapMessage::_Internal {
 public:
};

TestMapMessage::TestMapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMapMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:testpb.TestMapMessage)
}
TestMapMessage::TestMapMessage(const TestMapMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMapMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.kv_)*/{}
    , /*decltype(_impl_.kv2_)*/{}
    , /*decltype(_impl_.kv3_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  _this->_impl_.kv2_.MergeFrom(from._impl_.kv2_);
  _this->_impl_.kv3_.MergeFrom(from._impl_.kv3_);
  // @@protoc_insertion_point(copy_constructor:testpb.TestMapMessage)
}

inline void TestMapMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.kv_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.kv2_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.kv3_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMapMessage::~TestMapMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestMapMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMapMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kv_.Destruct();
  _impl_.kv_.~MapField();
  _impl_.kv2_.Destruct();
  _impl_.kv2_.~MapField();
  _impl_.kv3_.Destruct();
  _impl_.kv3_.~MapField();
}

void TestMapMessage::ArenaDtor(void* object) {
  TestMapMessage* _this = reinterpret_cast< TestMapMessage* >(object);
  _this->_impl_.kv_.Destruct();
  _this->_impl_.kv2_.Destruct();
  _this->_impl_.kv3_.Destruct();
}
void TestMapMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMapMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestMapMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kv_.Clear();
  _impl_.kv2_.Clear();
  _impl_.kv3_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMapMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, string> kv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .testpb.TestMapMessage.NullableWrapper> kv3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv3_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMapMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestMapMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, string> kv = 1;
  if (!this->_internal_kv().empty()) {
    using MapType = ::_pb::Map<uint32_t, std::string>;
    using WireHelper = TestMapMessage_KvEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "testpb.TestMapMessage.KvEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
  if (!this->_internal_kv2().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::testpb::TestMapMessage_StringWrapper>;
    using WireHelper = TestMapMessage_Kv2Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv2();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .testpb.TestMapMessage.NullableWrapper> kv3 = 3;
  if (!this->_internal_kv3().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::testpb::TestMapMessage_NullableWrapper>;
    using WireHelper = TestMapMessage_Kv3Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv3();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestMapMessage)
  return target;
}

size_t TestMapMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestMapMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> kv = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator
      it = this->_internal_kv().begin();
      it != this->_internal_kv().end(); ++it) {
    total_size += TestMapMessage_KvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >::const_iterator
      it = this->_internal_kv2().begin();
      it != this->_internal_kv2().end(); ++it) {
    total_size += TestMapMessage_Kv2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .testpb.TestMapMessage.NullableWrapper> kv3 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv3_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_NullableWrapper >::const_iterator
      it = this->_internal_kv3().begin();
      it != this->_internal_kv3().end(); ++it) {
    total_size += TestMapMessage_Kv3Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMapMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMapMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMapMessage::GetClassData() const { return &_class_data_; }


void TestMapMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMapMessage*>(&to_msg);
  auto& from = static_cast<const TestMapMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestMapMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  _this->_impl_.kv2_.MergeFrom(from._impl_.kv2_);
  _this->_impl_.kv3_.MergeFrom(from._impl_.kv3_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMapMessage::CopyFrom(const TestMapMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestMapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMapMessage::IsInitialized() const {
  return true;
}

void TestMapMessage::InternalSwap(TestMapMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  _impl_.kv2_.InternalSwap(&other->_impl_.kv2_);
  _impl_.kv3_.InternalSwap(&other->_impl_.kv3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMapMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[12]);
}

// ===================================================================

class TestFieldMaskMessage_NestedMessage::_Internal {
 public:
};

TestFieldMaskMessage_NestedMessage::TestFieldMaskMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testpb.TestFieldMaskMessage.NestedMessage)
}
TestFieldMaskMessage_NestedMessage::TestFieldMaskMessage_NestedMessage(const TestFieldMaskMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestFieldMaskMessage_NestedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p1_){}
    , decltype(_impl_.p2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.p1_, &from._impl_.p1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.p2_) -
    reinterpret_cast<char*>(&_impl_.p1_)) + sizeof(_impl_.p2_));
  // @@protoc_insertion_point(copy_constructor:testpb.TestFieldMaskMessage.NestedMessage)
}

inline void TestFieldMaskMessage_NestedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p1_){int64_t{0}}
    , decltype(_impl_.p2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestFieldMaskMessage_NestedMessage::~TestFieldMaskMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestFieldMaskMessage.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestFieldMaskMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestFieldMaskMessage_NestedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestFieldMaskMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestFieldMaskMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.p1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.p2_) -
      reinterpret_cast<char*>(&_impl_.p1_)) + sizeof(_impl_.p2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldMaskMessage_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 p1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 p2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.p2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFieldMaskMessage_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestFieldMaskMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 p1 = 1;
  if (this->_internal_p1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_p1(), target);
  }

  // uint32 p2 = 2;
  if (this->_internal_p2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_p2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestFieldMaskMessage.NestedMessage)
  return target;
}

size_t TestFieldMaskMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestFieldMaskMessage.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 p1 = 1;
  if (this->_internal_p1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_p1());
  }

  // uint32 p2 = 2;
  if (this->_internal_p2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_p2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFieldMaskMessage_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestFieldMaskMessage_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFieldMaskMessage_NestedMessage::GetClassData() const { return &_class_data_; }


void TestFieldMaskMessage_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestFieldMaskMessage_NestedMessage*>(&to_msg);
  auto& from = static_cast<const TestFieldMaskMessage_NestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestFieldMaskMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_p1() != 0) {
    _this->_internal_set_p1(from._internal_p1());
  }
  if (from._internal_p2() != 0) {
    _this->_internal_set_p2(from._internal_p2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFieldMaskMessage_NestedMessage::CopyFrom(const TestFieldMaskMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestFieldMaskMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldMaskMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestFieldMaskMessage_NestedMessage::InternalSwap(TestFieldMaskMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestFieldMaskMessage_NestedMessage, _impl_.p2_)
      + sizeof(TestFieldMaskMessage_NestedMessage::_impl_.p2_)
      - PROTOBUF_FIELD_OFFSET(TestFieldMaskMessage_NestedMessage, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldMaskMessage_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[13]);
}

// ===================================================================

TestFieldMaskMessage_Kv1Entry_DoNotUse::TestFieldMaskMessage_Kv1Entry_DoNotUse() {}
TestFieldMaskMessage_Kv1Entry_DoNotUse::TestFieldMaskMessage_Kv1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestFieldMaskMessage_Kv1Entry_DoNotUse::MergeFrom(const TestFieldMaskMessage_Kv1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestFieldMaskMessage_Kv1Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[14]);
}

// ===================================================================

TestFieldMaskMessage_Kv2Entry_DoNotUse::TestFieldMaskMessage_Kv2Entry_DoNotUse() {}
TestFieldMaskMessage_Kv2Entry_DoNotUse::TestFieldMaskMessage_Kv2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestFieldMaskMessage_Kv2Entry_DoNotUse::MergeFrom(const TestFieldMaskMessage_Kv2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestFieldMaskMessage_Kv2Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[15]);
}

// ===================================================================

class TestFieldMaskMessage::_Internal {
 public:
  static const ::testpb::TestFieldMaskMessage_NestedMessage& msg(const TestFieldMaskMessage* msg);
};

const ::testpb::TestFieldMaskMessage_NestedMessage&
TestFieldMaskMessage::_Internal::msg(const TestFieldMaskMessage* msg) {
  return *msg->_impl_.msg_;
}
TestFieldMaskMessage::TestFieldMaskMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestFieldMaskMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:testpb.TestFieldMaskMessage)
}
TestFieldMaskMessage::TestFieldMaskMessage(const TestFieldMaskMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestFieldMaskMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_.kv1_)*/{}
    , /*decltype(_impl_.kv2_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.msg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.kv1_.MergeFrom(from._impl_.kv1_);
  _this->_impl_.kv2_.MergeFrom(from._impl_.kv2_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::testpb::TestFieldMaskMessage_NestedMessage(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:testpb.TestFieldMaskMessage)
}

inline void TestFieldMaskMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_.kv1_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.kv2_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.msg_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestFieldMaskMessage::~TestFieldMaskMessage() {
  // @@protoc_insertion_point(destructor:testpb.TestFieldMaskMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestFieldMaskMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
  _impl_.kv1_.Destruct();
  _impl_.kv1_.~MapField();
  _impl_.kv2_.Destruct();
  _impl_.kv2_.~MapField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void TestFieldMaskMessage::ArenaDtor(void* object) {
  TestFieldMaskMessage* _this = reinterpret_cast< TestFieldMaskMessage* >(object);
  _this->_impl_.kv1_.Destruct();
  _this->_impl_.kv2_.Destruct();
}
void TestFieldMaskMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestFieldMaskMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:testpb.TestFieldMaskMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.kv1_.Clear();
  _impl_.kv2_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldMaskMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testpb.TestFieldMaskMessage.name"));
        } else
          goto handle_unusual;
        continue;
      // .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv1_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, string> kv2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.kv2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFieldMaskMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testpb.TestFieldMaskMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testpb.TestFieldMaskMessage.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
  if (this->_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  // repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
  if (!this->_internal_kv1().empty()) {
    using MapType = ::_pb::Map<int64_t, ::testpb::TestFieldMaskMessage_NestedMessage>;
    using WireHelper = TestFieldMaskMessage_Kv1Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv1();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, string> kv2 = 5;
  if (!this->_internal_kv2().empty()) {
    using MapType = ::_pb::Map<int64_t, std::string>;
    using WireHelper = TestFieldMaskMessage_Kv2Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_kv2();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "testpb.TestFieldMaskMessage.Kv2Entry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testpb.TestFieldMaskMessage)
  return target;
}

size_t TestFieldMaskMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testpb.TestFieldMaskMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv1_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >::const_iterator
      it = this->_internal_kv1().begin();
      it != this->_internal_kv1().end(); ++it) {
    total_size += TestFieldMaskMessage_Kv1Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, string> kv2 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kv2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
      it = this->_internal_kv2().begin();
      it != this->_internal_kv2().end(); ++it) {
    total_size += TestFieldMaskMessage_Kv2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFieldMaskMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestFieldMaskMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFieldMaskMessage::GetClassData() const { return &_class_data_; }


void TestFieldMaskMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestFieldMaskMessage*>(&to_msg);
  auto& from = static_cast<const TestFieldMaskMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testpb.TestFieldMaskMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_impl_.kv1_.MergeFrom(from._impl_.kv1_);
  _this->_impl_.kv2_.MergeFrom(from._impl_.kv2_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::testpb::TestFieldMaskMessage_NestedMessage::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFieldMaskMessage::CopyFrom(const TestFieldMaskMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testpb.TestFieldMaskMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldMaskMessage::IsInitialized() const {
  return true;
}

void TestFieldMaskMessage::InternalSwap(TestFieldMaskMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  _impl_.kv1_.InternalSwap(&other->_impl_.kv1_);
  _impl_.kv2_.InternalSwap(&other->_impl_.kv2_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldMaskMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testpb::TestChannelDataMessage*
Arena::CreateMaybeMessage< ::testpb::TestChannelDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestChannelDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestAnyMessage_Type1*
Arena::CreateMaybeMessage< ::testpb::TestAnyMessage_Type1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestAnyMessage_Type1 >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestAnyMessage_Type2*
Arena::CreateMaybeMessage< ::testpb::TestAnyMessage_Type2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestAnyMessage_Type2 >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestAnyMessage*
Arena::CreateMaybeMessage< ::testpb::TestAnyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestAnyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMergeMessage_StringWrapper*
Arena::CreateMaybeMessage< ::testpb::TestMergeMessage_StringWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMergeMessage_StringWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMergeMessage_KvEntry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestMergeMessage_KvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMergeMessage_KvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMergeMessage*
Arena::CreateMaybeMessage< ::testpb::TestMergeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMergeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage_KvEntry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage_KvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage_KvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage_StringWrapper*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage_StringWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage_StringWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage_Kv2Entry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage_Kv2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage_Kv2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage_NullableWrapper*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage_NullableWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage_NullableWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage_Kv3Entry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage_Kv3Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage_Kv3Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestMapMessage*
Arena::CreateMaybeMessage< ::testpb::TestMapMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestMapMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestFieldMaskMessage_NestedMessage*
Arena::CreateMaybeMessage< ::testpb::TestFieldMaskMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestFieldMaskMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse*
Arena::CreateMaybeMessage< ::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::testpb::TestFieldMaskMessage*
Arena::CreateMaybeMessage< ::testpb::TestFieldMaskMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testpb::TestFieldMaskMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
