// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tps.proto

#ifdef _MSC_VER
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#	pragma warning(disable: 4946)
#endif

#include "tps.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tpspb {
PROTOBUF_CONSTEXPR TestRepGameState::TestRepGameState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.jumps_)*/0} {}
struct TestRepGameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepGameStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepGameStateDefaultTypeInternal() {}
  union {
    TestRepGameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepGameStateDefaultTypeInternal _TestRepGameState_default_instance_;
PROTOBUF_CONSTEXPR TestRepPlayerControllerState::TestRepPlayerControllerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testrepactor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRepPlayerControllerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepPlayerControllerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepPlayerControllerStateDefaultTypeInternal() {}
  union {
    TestRepPlayerControllerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepPlayerControllerStateDefaultTypeInternal _TestRepPlayerControllerState_default_instance_;
PROTOBUF_CONSTEXPR TestNPCState::TestNPCState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.goallocation_)*/nullptr
  , /*decltype(_impl_.bmoving_)*/false} {}
struct TestNPCStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNPCStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNPCStateDefaultTypeInternal() {}
  union {
    TestNPCState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNPCStateDefaultTypeInternal _TestNPCState_default_instance_;
PROTOBUF_CONSTEXPR EntityChannelData::EntityChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objref_)*/nullptr
  , /*decltype(_impl_.actorstate_)*/nullptr
  , /*decltype(_impl_.pawnstate_)*/nullptr
  , /*decltype(_impl_.characterstate_)*/nullptr
  , /*decltype(_impl_.playerstate_)*/nullptr
  , /*decltype(_impl_.controllerstate_)*/nullptr
  , /*decltype(_impl_.playercontrollerstate_)*/nullptr
  , /*decltype(_impl_.actorcomponentstate_)*/nullptr
  , /*decltype(_impl_.scenecomponentstate_)*/nullptr
  , /*decltype(_impl_.testrepplayercontrollerstate_)*/nullptr
  , /*decltype(_impl_.testnpcstate_)*/nullptr} {}
struct EntityChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityChannelDataDefaultTypeInternal() {}
  union {
    EntityChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityChannelDataDefaultTypeInternal _EntityChannelData_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ActorStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_PawnStatesEntry_DoNotUse::TestRepChannelData_PawnStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_PawnStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PawnStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_CharacterStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_PlayerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ControllerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_PlayerControllerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ActorComponentStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_SceneComponentStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_TestNPCStatesEntry_DoNotUse::TestRepChannelData_TestNPCStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_TestNPCStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_TestNPCStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_TestNPCStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_TestNPCStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_TestNPCStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_TestNPCStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData::TestRepChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actorstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pawnstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.characterstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.playerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.controllerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.playercontrollerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.actorcomponentstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.scenecomponentstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.staticmeshcomponentstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.testrepplayercontrollerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.testnpcstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.gamestate_)*/nullptr
  , /*decltype(_impl_.testgamestate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRepChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelDataDefaultTypeInternal() {}
  union {
    TestRepChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelDataDefaultTypeInternal _TestRepChannelData_default_instance_;
PROTOBUF_CONSTEXPR TestRepGameState_MulticastNumber_Params::TestRepGameState_MulticastNumber_Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_)*/0} {}
struct TestRepGameState_MulticastNumber_ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepGameState_MulticastNumber_ParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepGameState_MulticastNumber_ParamsDefaultTypeInternal() {}
  union {
    TestRepGameState_MulticastNumber_Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepGameState_MulticastNumber_ParamsDefaultTypeInternal _TestRepGameState_MulticastNumber_Params_default_instance_;
}  // namespace tpspb
static ::_pb::Metadata file_level_metadata_tps_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tps_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tps_2eproto = nullptr;

const uint32_t TableStruct_tps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState, _impl_.jumps_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepPlayerControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepPlayerControllerState, _impl_.testrepactor_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestNPCState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestNPCState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestNPCState, _impl_.bmoving_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestNPCState, _impl_.goallocation_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.objref_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.actorstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.pawnstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.characterstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.playerstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.controllerstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.playercontrollerstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.actorcomponentstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.scenecomponentstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.testrepplayercontrollerstate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::EntityChannelData, _impl_.testnpcstate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.gamestate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.actorstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.pawnstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.characterstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.playerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.controllerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.playercontrollerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.actorcomponentstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.scenecomponentstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.staticmeshcomponentstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.testgamestate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.testrepplayercontrollerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.testnpcstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState_MulticastNumber_Params, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState_MulticastNumber_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepGameState_MulticastNumber_Params, _impl_.num_),
  0,
};
static const ::_pbi::MigrationSchema schemas_tps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::tpspb::TestRepGameState)},
  { 8, -1, -1, sizeof(::tpspb::TestRepPlayerControllerState)},
  { 15, 23, -1, sizeof(::tpspb::TestNPCState)},
  { 25, 42, -1, sizeof(::tpspb::EntityChannelData)},
  { 53, 61, -1, sizeof(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse)},
  { 63, 71, -1, sizeof(::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse)},
  { 73, 81, -1, sizeof(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse)},
  { 83, 91, -1, sizeof(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse)},
  { 93, 101, -1, sizeof(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse)},
  { 103, 111, -1, sizeof(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse)},
  { 113, 121, -1, sizeof(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse)},
  { 123, 131, -1, sizeof(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse)},
  { 133, 141, -1, sizeof(::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse)},
  { 143, 151, -1, sizeof(::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse)},
  { 153, 161, -1, sizeof(::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse)},
  { 163, -1, -1, sizeof(::tpspb::TestRepChannelData)},
  { 182, 189, -1, sizeof(::tpspb::TestRepGameState_MulticastNumber_Params)},
};

static const ::_pb::Message* const file_default_instances_tps_2eproto[] = {
  &::tpspb::_TestRepGameState_default_instance_._instance,
  &::tpspb::_TestRepPlayerControllerState_default_instance_._instance,
  &::tpspb::_TestNPCState_default_instance_._instance,
  &::tpspb::_EntityChannelData_default_instance_._instance,
  &::tpspb::_TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_PawnStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_TestNPCStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_default_instance_._instance,
  &::tpspb::_TestRepGameState_MulticastNumber_Params_default_instance_._instance,
};

const char descriptor_table_protodef_tps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttps.proto\022\005tpspb\032\023unreal_common.proto\""
  "0\n\020TestRepGameState\022\022\n\005jumps\030\001 \001(\005H\000\210\001\001B"
  "\010\n\006_jumps\"O\n\034TestRepPlayerControllerStat"
  "e\022/\n\014testRepActor\030\001 \001(\0132\031.unrealpb.Unrea"
  "lObjectRef\"o\n\014TestNPCState\022\024\n\007bMoving\030\001 "
  "\001(\010H\000\210\001\001\022,\n\014goalLocation\030\002 \001(\0132\021.unrealp"
  "b.FVectorH\001\210\001\001B\n\n\010_bMovingB\017\n\r_goalLocat"
  "ion\"\342\006\n\021EntityChannelData\022.\n\006objRef\030\001 \001("
  "\0132\031.unrealpb.UnrealObjectRefH\000\210\001\001\022-\n\nact"
  "orState\030\002 \001(\0132\024.unrealpb.ActorStateH\001\210\001\001"
  "\022+\n\tpawnState\030\003 \001(\0132\023.unrealpb.PawnState"
  "H\002\210\001\001\0225\n\016characterState\030\004 \001(\0132\030.unrealpb"
  ".CharacterStateH\003\210\001\001\022/\n\013playerState\030\005 \001("
  "\0132\025.unrealpb.PlayerStateH\004\210\001\001\0227\n\017control"
  "lerState\030\006 \001(\0132\031.unrealpb.ControllerStat"
  "eH\005\210\001\001\022C\n\025playerControllerState\030\007 \001(\0132\037."
  "unrealpb.PlayerControllerStateH\006\210\001\001\022\?\n\023a"
  "ctorComponentState\030\010 \001(\0132\035.unrealpb.Acto"
  "rComponentStateH\007\210\001\001\022\?\n\023sceneComponentSt"
  "ate\030\t \001(\0132\035.unrealpb.SceneComponentState"
  "H\010\210\001\001\022N\n\034testRepPlayerControllerState\030\013 "
  "\001(\0132#.tpspb.TestRepPlayerControllerState"
  "H\t\210\001\001\022.\n\014testNPCState\030\014 \001(\0132\023.tpspb.Test"
  "NPCStateH\n\210\001\001B\t\n\007_objRefB\r\n\013_actorStateB"
  "\014\n\n_pawnStateB\021\n\017_characterStateB\016\n\014_pla"
  "yerStateB\022\n\020_controllerStateB\030\n\026_playerC"
  "ontrollerStateB\026\n\024_actorComponentStateB\026"
  "\n\024_sceneComponentStateB\037\n\035_testRepPlayer"
  "ControllerStateB\017\n\r_testNPCState\"\203\017\n\022Tes"
  "tRepChannelData\022*\n\tgameState\030\001 \001(\0132\027.unr"
  "ealpb.GameStateBase\022\?\n\013actorStates\030\002 \003(\013"
  "2*.tpspb.TestRepChannelData.ActorStatesE"
  "ntry\022=\n\npawnStates\030\003 \003(\0132).tpspb.TestRep"
  "ChannelData.PawnStatesEntry\022G\n\017character"
  "States\030\004 \003(\0132..tpspb.TestRepChannelData."
  "CharacterStatesEntry\022A\n\014playerStates\030\005 \003"
  "(\0132+.tpspb.TestRepChannelData.PlayerStat"
  "esEntry\022I\n\020controllerStates\030\006 \003(\0132/.tpsp"
  "b.TestRepChannelData.ControllerStatesEnt"
  "ry\022U\n\026playerControllerStates\030\007 \003(\01325.tps"
  "pb.TestRepChannelData.PlayerControllerSt"
  "atesEntry\022Q\n\024actorComponentStates\030\010 \003(\0132"
  "3.tpspb.TestRepChannelData.ActorComponen"
  "tStatesEntry\022Q\n\024sceneComponentStates\030\t \003"
  "(\01323.tpspb.TestRepChannelData.SceneCompo"
  "nentStatesEntry\022[\n\031staticMeshComponentSt"
  "ates\030\n \003(\01328.tpspb.TestRepChannelData.St"
  "aticMeshComponentStatesEntry\022.\n\rtestGame"
  "State\030\024 \001(\0132\027.tpspb.TestRepGameState\022c\n\035"
  "testRepPlayerControllerStates\030\025 \003(\0132<.tp"
  "spb.TestRepChannelData.TestRepPlayerCont"
  "rollerStatesEntry\022C\n\rtestNPCStates\030\026 \003(\013"
  "2,.tpspb.TestRepChannelData.TestNPCState"
  "sEntry\032H\n\020ActorStatesEntry\022\013\n\003key\030\001 \001(\r\022"
  "#\n\005value\030\002 \001(\0132\024.unrealpb.ActorState:\0028\001"
  "\032F\n\017PawnStatesEntry\022\013\n\003key\030\001 \001(\r\022\"\n\005valu"
  "e\030\002 \001(\0132\023.unrealpb.PawnState:\0028\001\032P\n\024Char"
  "acterStatesEntry\022\013\n\003key\030\001 \001(\r\022\'\n\005value\030\002"
  " \001(\0132\030.unrealpb.CharacterState:\0028\001\032J\n\021Pl"
  "ayerStatesEntry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002 "
  "\001(\0132\025.unrealpb.PlayerState:\0028\001\032R\n\025Contro"
  "llerStatesEntry\022\013\n\003key\030\001 \001(\r\022(\n\005value\030\002 "
  "\001(\0132\031.unrealpb.ControllerState:\0028\001\032^\n\033Pl"
  "ayerControllerStatesEntry\022\013\n\003key\030\001 \001(\r\022."
  "\n\005value\030\002 \001(\0132\037.unrealpb.PlayerControlle"
  "rState:\0028\001\032Z\n\031ActorComponentStatesEntry\022"
  "\013\n\003key\030\001 \001(\r\022,\n\005value\030\002 \001(\0132\035.unrealpb.A"
  "ctorComponentState:\0028\001\032Z\n\031SceneComponent"
  "StatesEntry\022\013\n\003key\030\001 \001(\r\022,\n\005value\030\002 \001(\0132"
  "\035.unrealpb.SceneComponentState:\0028\001\032d\n\036St"
  "aticMeshComponentStatesEntry\022\013\n\003key\030\001 \001("
  "\r\0221\n\005value\030\002 \001(\0132\".unrealpb.StaticMeshCo"
  "mponentState:\0028\001\032i\n\"TestRepPlayerControl"
  "lerStatesEntry\022\013\n\003key\030\001 \001(\r\0222\n\005value\030\002 \001"
  "(\0132#.tpspb.TestRepPlayerControllerState:"
  "\0028\001\032I\n\022TestNPCStatesEntry\022\013\n\003key\030\001 \001(\r\022\""
  "\n\005value\030\002 \001(\0132\023.tpspb.TestNPCState:\0028\001\"C"
  "\n\'TestRepGameState_MulticastNumber_Param"
  "s\022\020\n\003num\030\001 \001(\005H\000\210\001\001B\006\n\004_numB@Z>github.co"
  "m/metaworking/channeld/examples/channeld"
  "-ue-tps/tpspbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tps_2eproto_deps[1] = {
  &::descriptor_table_unreal_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_tps_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tps_2eproto = {
    false, false, 3221, descriptor_table_protodef_tps_2eproto,
    "tps.proto",
    &descriptor_table_tps_2eproto_once, descriptor_table_tps_2eproto_deps, 1, 17,
    schemas_tps_2eproto, file_default_instances_tps_2eproto, TableStruct_tps_2eproto::offsets,
    file_level_metadata_tps_2eproto, file_level_enum_descriptors_tps_2eproto,
    file_level_service_descriptors_tps_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tps_2eproto_getter() {
  return &descriptor_table_tps_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tps_2eproto(&descriptor_table_tps_2eproto);
namespace tpspb {

// ===================================================================

class TestRepGameState::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRepGameState>()._impl_._has_bits_);
  static void set_has_jumps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestRepGameState::TestRepGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.TestRepGameState)
}
TestRepGameState::TestRepGameState(const TestRepGameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepGameState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jumps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.jumps_ = from._impl_.jumps_;
  // @@protoc_insertion_point(copy_constructor:tpspb.TestRepGameState)
}

inline void TestRepGameState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jumps_){0}
  };
}

TestRepGameState::~TestRepGameState() {
  // @@protoc_insertion_point(destructor:tpspb.TestRepGameState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepGameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestRepGameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestRepGameState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jumps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepGameState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 jumps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_jumps(&has_bits);
          _impl_.jumps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepGameState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestRepGameState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 jumps = 1;
  if (_internal_has_jumps()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_jumps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestRepGameState)
  return target;
}

size_t TestRepGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestRepGameState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 jumps = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_jumps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepGameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepGameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepGameState::GetClassData() const { return &_class_data_; }


void TestRepGameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepGameState*>(&to_msg);
  auto& from = static_cast<const TestRepGameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestRepGameState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_jumps()) {
    _this->_internal_set_jumps(from._internal_jumps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepGameState::CopyFrom(const TestRepGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestRepGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepGameState::IsInitialized() const {
  return true;
}

void TestRepGameState::InternalSwap(TestRepGameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.jumps_, other->_impl_.jumps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepGameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[0]);
}

// ===================================================================

class TestRepPlayerControllerState::_Internal {
 public:
  static const ::unrealpb::UnrealObjectRef& testrepactor(const TestRepPlayerControllerState* msg);
};

const ::unrealpb::UnrealObjectRef&
TestRepPlayerControllerState::_Internal::testrepactor(const TestRepPlayerControllerState* msg) {
  return *msg->_impl_.testrepactor_;
}
void TestRepPlayerControllerState::clear_testrepactor() {
  if (GetArenaForAllocation() == nullptr && _impl_.testrepactor_ != nullptr) {
    delete _impl_.testrepactor_;
  }
  _impl_.testrepactor_ = nullptr;
}
TestRepPlayerControllerState::TestRepPlayerControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.TestRepPlayerControllerState)
}
TestRepPlayerControllerState::TestRepPlayerControllerState(const TestRepPlayerControllerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepPlayerControllerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testrepactor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_testrepactor()) {
    _this->_impl_.testrepactor_ = new ::unrealpb::UnrealObjectRef(*from._impl_.testrepactor_);
  }
  // @@protoc_insertion_point(copy_constructor:tpspb.TestRepPlayerControllerState)
}

inline void TestRepPlayerControllerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testrepactor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestRepPlayerControllerState::~TestRepPlayerControllerState() {
  // @@protoc_insertion_point(destructor:tpspb.TestRepPlayerControllerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepPlayerControllerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.testrepactor_;
}

void TestRepPlayerControllerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepPlayerControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestRepPlayerControllerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.testrepactor_ != nullptr) {
    delete _impl_.testrepactor_;
  }
  _impl_.testrepactor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepPlayerControllerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.UnrealObjectRef testRepActor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_testrepactor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepPlayerControllerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestRepPlayerControllerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.UnrealObjectRef testRepActor = 1;
  if (this->_internal_has_testrepactor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::testrepactor(this),
        _Internal::testrepactor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestRepPlayerControllerState)
  return target;
}

size_t TestRepPlayerControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestRepPlayerControllerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unrealpb.UnrealObjectRef testRepActor = 1;
  if (this->_internal_has_testrepactor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testrepactor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepPlayerControllerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepPlayerControllerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepPlayerControllerState::GetClassData() const { return &_class_data_; }


void TestRepPlayerControllerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepPlayerControllerState*>(&to_msg);
  auto& from = static_cast<const TestRepPlayerControllerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestRepPlayerControllerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_testrepactor()) {
    _this->_internal_mutable_testrepactor()->::unrealpb::UnrealObjectRef::MergeFrom(
        from._internal_testrepactor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepPlayerControllerState::CopyFrom(const TestRepPlayerControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestRepPlayerControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepPlayerControllerState::IsInitialized() const {
  return true;
}

void TestRepPlayerControllerState::InternalSwap(TestRepPlayerControllerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.testrepactor_, other->_impl_.testrepactor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepPlayerControllerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[1]);
}

// ===================================================================

class TestNPCState::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNPCState>()._impl_._has_bits_);
  static void set_has_bmoving(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::unrealpb::FVector& goallocation(const TestNPCState* msg);
  static void set_has_goallocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::unrealpb::FVector&
TestNPCState::_Internal::goallocation(const TestNPCState* msg) {
  return *msg->_impl_.goallocation_;
}
void TestNPCState::clear_goallocation() {
  if (_impl_.goallocation_ != nullptr) _impl_.goallocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TestNPCState::TestNPCState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.TestNPCState)
}
TestNPCState::TestNPCState(const TestNPCState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestNPCState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goallocation_){nullptr}
    , decltype(_impl_.bmoving_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_goallocation()) {
    _this->_impl_.goallocation_ = new ::unrealpb::FVector(*from._impl_.goallocation_);
  }
  _this->_impl_.bmoving_ = from._impl_.bmoving_;
  // @@protoc_insertion_point(copy_constructor:tpspb.TestNPCState)
}

inline void TestNPCState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goallocation_){nullptr}
    , decltype(_impl_.bmoving_){false}
  };
}

TestNPCState::~TestNPCState() {
  // @@protoc_insertion_point(destructor:tpspb.TestNPCState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNPCState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.goallocation_;
}

void TestNPCState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestNPCState::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestNPCState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.goallocation_ != nullptr);
    _impl_.goallocation_->Clear();
  }
  _impl_.bmoving_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNPCState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bMoving = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bmoving(&has_bits);
          _impl_.bmoving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector goalLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_goallocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNPCState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestNPCState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool bMoving = 1;
  if (_internal_has_bmoving()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bmoving(), target);
  }

  // optional .unrealpb.FVector goalLocation = 2;
  if (_internal_has_goallocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::goallocation(this),
        _Internal::goallocation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestNPCState)
  return target;
}

size_t TestNPCState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestNPCState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .unrealpb.FVector goalLocation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.goallocation_);
    }

    // optional bool bMoving = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNPCState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestNPCState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNPCState::GetClassData() const { return &_class_data_; }


void TestNPCState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestNPCState*>(&to_msg);
  auto& from = static_cast<const TestNPCState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestNPCState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_goallocation()->::unrealpb::FVector::MergeFrom(
          from._internal_goallocation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bmoving_ = from._impl_.bmoving_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNPCState::CopyFrom(const TestNPCState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestNPCState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNPCState::IsInitialized() const {
  return true;
}

void TestNPCState::InternalSwap(TestNPCState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNPCState, _impl_.bmoving_)
      + sizeof(TestNPCState::_impl_.bmoving_)
      - PROTOBUF_FIELD_OFFSET(TestNPCState, _impl_.goallocation_)>(
          reinterpret_cast<char*>(&_impl_.goallocation_),
          reinterpret_cast<char*>(&other->_impl_.goallocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNPCState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[2]);
}

// ===================================================================

class EntityChannelData::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityChannelData>()._impl_._has_bits_);
  static const ::unrealpb::UnrealObjectRef& objref(const EntityChannelData* msg);
  static void set_has_objref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::unrealpb::ActorState& actorstate(const EntityChannelData* msg);
  static void set_has_actorstate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::unrealpb::PawnState& pawnstate(const EntityChannelData* msg);
  static void set_has_pawnstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::unrealpb::CharacterState& characterstate(const EntityChannelData* msg);
  static void set_has_characterstate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::unrealpb::PlayerState& playerstate(const EntityChannelData* msg);
  static void set_has_playerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::unrealpb::ControllerState& controllerstate(const EntityChannelData* msg);
  static void set_has_controllerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::unrealpb::PlayerControllerState& playercontrollerstate(const EntityChannelData* msg);
  static void set_has_playercontrollerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::unrealpb::ActorComponentState& actorcomponentstate(const EntityChannelData* msg);
  static void set_has_actorcomponentstate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::unrealpb::SceneComponentState& scenecomponentstate(const EntityChannelData* msg);
  static void set_has_scenecomponentstate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::tpspb::TestRepPlayerControllerState& testrepplayercontrollerstate(const EntityChannelData* msg);
  static void set_has_testrepplayercontrollerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tpspb::TestNPCState& testnpcstate(const EntityChannelData* msg);
  static void set_has_testnpcstate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::unrealpb::UnrealObjectRef&
EntityChannelData::_Internal::objref(const EntityChannelData* msg) {
  return *msg->_impl_.objref_;
}
const ::unrealpb::ActorState&
EntityChannelData::_Internal::actorstate(const EntityChannelData* msg) {
  return *msg->_impl_.actorstate_;
}
const ::unrealpb::PawnState&
EntityChannelData::_Internal::pawnstate(const EntityChannelData* msg) {
  return *msg->_impl_.pawnstate_;
}
const ::unrealpb::CharacterState&
EntityChannelData::_Internal::characterstate(const EntityChannelData* msg) {
  return *msg->_impl_.characterstate_;
}
const ::unrealpb::PlayerState&
EntityChannelData::_Internal::playerstate(const EntityChannelData* msg) {
  return *msg->_impl_.playerstate_;
}
const ::unrealpb::ControllerState&
EntityChannelData::_Internal::controllerstate(const EntityChannelData* msg) {
  return *msg->_impl_.controllerstate_;
}
const ::unrealpb::PlayerControllerState&
EntityChannelData::_Internal::playercontrollerstate(const EntityChannelData* msg) {
  return *msg->_impl_.playercontrollerstate_;
}
const ::unrealpb::ActorComponentState&
EntityChannelData::_Internal::actorcomponentstate(const EntityChannelData* msg) {
  return *msg->_impl_.actorcomponentstate_;
}
const ::unrealpb::SceneComponentState&
EntityChannelData::_Internal::scenecomponentstate(const EntityChannelData* msg) {
  return *msg->_impl_.scenecomponentstate_;
}
const ::tpspb::TestRepPlayerControllerState&
EntityChannelData::_Internal::testrepplayercontrollerstate(const EntityChannelData* msg) {
  return *msg->_impl_.testrepplayercontrollerstate_;
}
const ::tpspb::TestNPCState&
EntityChannelData::_Internal::testnpcstate(const EntityChannelData* msg) {
  return *msg->_impl_.testnpcstate_;
}
void EntityChannelData::clear_objref() {
  if (_impl_.objref_ != nullptr) _impl_.objref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EntityChannelData::clear_actorstate() {
  if (_impl_.actorstate_ != nullptr) _impl_.actorstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void EntityChannelData::clear_pawnstate() {
  if (_impl_.pawnstate_ != nullptr) _impl_.pawnstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void EntityChannelData::clear_characterstate() {
  if (_impl_.characterstate_ != nullptr) _impl_.characterstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void EntityChannelData::clear_playerstate() {
  if (_impl_.playerstate_ != nullptr) _impl_.playerstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void EntityChannelData::clear_controllerstate() {
  if (_impl_.controllerstate_ != nullptr) _impl_.controllerstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void EntityChannelData::clear_playercontrollerstate() {
  if (_impl_.playercontrollerstate_ != nullptr) _impl_.playercontrollerstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void EntityChannelData::clear_actorcomponentstate() {
  if (_impl_.actorcomponentstate_ != nullptr) _impl_.actorcomponentstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void EntityChannelData::clear_scenecomponentstate() {
  if (_impl_.scenecomponentstate_ != nullptr) _impl_.scenecomponentstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
EntityChannelData::EntityChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.EntityChannelData)
}
EntityChannelData::EntityChannelData(const EntityChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityChannelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objref_){nullptr}
    , decltype(_impl_.actorstate_){nullptr}
    , decltype(_impl_.pawnstate_){nullptr}
    , decltype(_impl_.characterstate_){nullptr}
    , decltype(_impl_.playerstate_){nullptr}
    , decltype(_impl_.controllerstate_){nullptr}
    , decltype(_impl_.playercontrollerstate_){nullptr}
    , decltype(_impl_.actorcomponentstate_){nullptr}
    , decltype(_impl_.scenecomponentstate_){nullptr}
    , decltype(_impl_.testrepplayercontrollerstate_){nullptr}
    , decltype(_impl_.testnpcstate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objref()) {
    _this->_impl_.objref_ = new ::unrealpb::UnrealObjectRef(*from._impl_.objref_);
  }
  if (from._internal_has_actorstate()) {
    _this->_impl_.actorstate_ = new ::unrealpb::ActorState(*from._impl_.actorstate_);
  }
  if (from._internal_has_pawnstate()) {
    _this->_impl_.pawnstate_ = new ::unrealpb::PawnState(*from._impl_.pawnstate_);
  }
  if (from._internal_has_characterstate()) {
    _this->_impl_.characterstate_ = new ::unrealpb::CharacterState(*from._impl_.characterstate_);
  }
  if (from._internal_has_playerstate()) {
    _this->_impl_.playerstate_ = new ::unrealpb::PlayerState(*from._impl_.playerstate_);
  }
  if (from._internal_has_controllerstate()) {
    _this->_impl_.controllerstate_ = new ::unrealpb::ControllerState(*from._impl_.controllerstate_);
  }
  if (from._internal_has_playercontrollerstate()) {
    _this->_impl_.playercontrollerstate_ = new ::unrealpb::PlayerControllerState(*from._impl_.playercontrollerstate_);
  }
  if (from._internal_has_actorcomponentstate()) {
    _this->_impl_.actorcomponentstate_ = new ::unrealpb::ActorComponentState(*from._impl_.actorcomponentstate_);
  }
  if (from._internal_has_scenecomponentstate()) {
    _this->_impl_.scenecomponentstate_ = new ::unrealpb::SceneComponentState(*from._impl_.scenecomponentstate_);
  }
  if (from._internal_has_testrepplayercontrollerstate()) {
    _this->_impl_.testrepplayercontrollerstate_ = new ::tpspb::TestRepPlayerControllerState(*from._impl_.testrepplayercontrollerstate_);
  }
  if (from._internal_has_testnpcstate()) {
    _this->_impl_.testnpcstate_ = new ::tpspb::TestNPCState(*from._impl_.testnpcstate_);
  }
  // @@protoc_insertion_point(copy_constructor:tpspb.EntityChannelData)
}

inline void EntityChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objref_){nullptr}
    , decltype(_impl_.actorstate_){nullptr}
    , decltype(_impl_.pawnstate_){nullptr}
    , decltype(_impl_.characterstate_){nullptr}
    , decltype(_impl_.playerstate_){nullptr}
    , decltype(_impl_.controllerstate_){nullptr}
    , decltype(_impl_.playercontrollerstate_){nullptr}
    , decltype(_impl_.actorcomponentstate_){nullptr}
    , decltype(_impl_.scenecomponentstate_){nullptr}
    , decltype(_impl_.testrepplayercontrollerstate_){nullptr}
    , decltype(_impl_.testnpcstate_){nullptr}
  };
}

EntityChannelData::~EntityChannelData() {
  // @@protoc_insertion_point(destructor:tpspb.EntityChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objref_;
  if (this != internal_default_instance()) delete _impl_.actorstate_;
  if (this != internal_default_instance()) delete _impl_.pawnstate_;
  if (this != internal_default_instance()) delete _impl_.characterstate_;
  if (this != internal_default_instance()) delete _impl_.playerstate_;
  if (this != internal_default_instance()) delete _impl_.controllerstate_;
  if (this != internal_default_instance()) delete _impl_.playercontrollerstate_;
  if (this != internal_default_instance()) delete _impl_.actorcomponentstate_;
  if (this != internal_default_instance()) delete _impl_.scenecomponentstate_;
  if (this != internal_default_instance()) delete _impl_.testrepplayercontrollerstate_;
  if (this != internal_default_instance()) delete _impl_.testnpcstate_;
}

void EntityChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.EntityChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.objref_ != nullptr);
      _impl_.objref_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.actorstate_ != nullptr);
      _impl_.actorstate_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pawnstate_ != nullptr);
      _impl_.pawnstate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.characterstate_ != nullptr);
      _impl_.characterstate_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.playerstate_ != nullptr);
      _impl_.playerstate_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.controllerstate_ != nullptr);
      _impl_.controllerstate_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.playercontrollerstate_ != nullptr);
      _impl_.playercontrollerstate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.actorcomponentstate_ != nullptr);
      _impl_.actorcomponentstate_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.scenecomponentstate_ != nullptr);
      _impl_.scenecomponentstate_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.testrepplayercontrollerstate_ != nullptr);
      _impl_.testrepplayercontrollerstate_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.testnpcstate_ != nullptr);
      _impl_.testnpcstate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .unrealpb.UnrealObjectRef objRef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.ActorState actorState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.PawnState pawnState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pawnstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.CharacterState characterState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_characterstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.PlayerState playerState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.ControllerState controllerState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_controllerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.PlayerControllerState playerControllerState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_playercontrollerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.ActorComponentState actorComponentState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_actorcomponentstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.SceneComponentState sceneComponentState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenecomponentstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tpspb.TestRepPlayerControllerState testRepPlayerControllerState = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_testrepplayercontrollerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tpspb.TestNPCState testNPCState = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_testnpcstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.EntityChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .unrealpb.UnrealObjectRef objRef = 1;
  if (_internal_has_objref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objref(this),
        _Internal::objref(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.ActorState actorState = 2;
  if (_internal_has_actorstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::actorstate(this),
        _Internal::actorstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.PawnState pawnState = 3;
  if (_internal_has_pawnstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pawnstate(this),
        _Internal::pawnstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.CharacterState characterState = 4;
  if (_internal_has_characterstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::characterstate(this),
        _Internal::characterstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.PlayerState playerState = 5;
  if (_internal_has_playerstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::playerstate(this),
        _Internal::playerstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.ControllerState controllerState = 6;
  if (_internal_has_controllerstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::controllerstate(this),
        _Internal::controllerstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.PlayerControllerState playerControllerState = 7;
  if (_internal_has_playercontrollerstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::playercontrollerstate(this),
        _Internal::playercontrollerstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.ActorComponentState actorComponentState = 8;
  if (_internal_has_actorcomponentstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::actorcomponentstate(this),
        _Internal::actorcomponentstate(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.SceneComponentState sceneComponentState = 9;
  if (_internal_has_scenecomponentstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::scenecomponentstate(this),
        _Internal::scenecomponentstate(this).GetCachedSize(), target, stream);
  }

  // optional .tpspb.TestRepPlayerControllerState testRepPlayerControllerState = 11;
  if (_internal_has_testrepplayercontrollerstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::testrepplayercontrollerstate(this),
        _Internal::testrepplayercontrollerstate(this).GetCachedSize(), target, stream);
  }

  // optional .tpspb.TestNPCState testNPCState = 12;
  if (_internal_has_testnpcstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::testnpcstate(this),
        _Internal::testnpcstate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.EntityChannelData)
  return target;
}

size_t EntityChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.EntityChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .unrealpb.UnrealObjectRef objRef = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objref_);
    }

    // optional .unrealpb.ActorState actorState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actorstate_);
    }

    // optional .unrealpb.PawnState pawnState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pawnstate_);
    }

    // optional .unrealpb.CharacterState characterState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.characterstate_);
    }

    // optional .unrealpb.PlayerState playerState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerstate_);
    }

    // optional .unrealpb.ControllerState controllerState = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.controllerstate_);
    }

    // optional .unrealpb.PlayerControllerState playerControllerState = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playercontrollerstate_);
    }

    // optional .unrealpb.ActorComponentState actorComponentState = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actorcomponentstate_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .unrealpb.SceneComponentState sceneComponentState = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenecomponentstate_);
    }

    // optional .tpspb.TestRepPlayerControllerState testRepPlayerControllerState = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.testrepplayercontrollerstate_);
    }

    // optional .tpspb.TestNPCState testNPCState = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.testnpcstate_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityChannelData::GetClassData() const { return &_class_data_; }


void EntityChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityChannelData*>(&to_msg);
  auto& from = static_cast<const EntityChannelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.EntityChannelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_objref()->::unrealpb::UnrealObjectRef::MergeFrom(
          from._internal_objref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_actorstate()->::unrealpb::ActorState::MergeFrom(
          from._internal_actorstate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pawnstate()->::unrealpb::PawnState::MergeFrom(
          from._internal_pawnstate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_characterstate()->::unrealpb::CharacterState::MergeFrom(
          from._internal_characterstate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_playerstate()->::unrealpb::PlayerState::MergeFrom(
          from._internal_playerstate());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_controllerstate()->::unrealpb::ControllerState::MergeFrom(
          from._internal_controllerstate());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_playercontrollerstate()->::unrealpb::PlayerControllerState::MergeFrom(
          from._internal_playercontrollerstate());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_actorcomponentstate()->::unrealpb::ActorComponentState::MergeFrom(
          from._internal_actorcomponentstate());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_scenecomponentstate()->::unrealpb::SceneComponentState::MergeFrom(
          from._internal_scenecomponentstate());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_testrepplayercontrollerstate()->::tpspb::TestRepPlayerControllerState::MergeFrom(
          from._internal_testrepplayercontrollerstate());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_testnpcstate()->::tpspb::TestNPCState::MergeFrom(
          from._internal_testnpcstate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityChannelData::CopyFrom(const EntityChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.EntityChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityChannelData::IsInitialized() const {
  return true;
}

void EntityChannelData::InternalSwap(EntityChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityChannelData, _impl_.testnpcstate_)
      + sizeof(EntityChannelData::_impl_.testnpcstate_)
      - PROTOBUF_FIELD_OFFSET(EntityChannelData, _impl_.objref_)>(
          reinterpret_cast<char*>(&_impl_.objref_),
          reinterpret_cast<char*>(&other->_impl_.objref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[3]);
}

// ===================================================================

TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse() {}
TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ActorStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ActorStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ActorStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[4]);
}

// ===================================================================

TestRepChannelData_PawnStatesEntry_DoNotUse::TestRepChannelData_PawnStatesEntry_DoNotUse() {}
TestRepChannelData_PawnStatesEntry_DoNotUse::TestRepChannelData_PawnStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_PawnStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_PawnStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_PawnStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[5]);
}

// ===================================================================

TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse() {}
TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_CharacterStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_CharacterStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_CharacterStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[6]);
}

// ===================================================================

TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse() {}
TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_PlayerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_PlayerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_PlayerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[7]);
}

// ===================================================================

TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse() {}
TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ControllerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ControllerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ControllerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[8]);
}

// ===================================================================

TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse() {}
TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_PlayerControllerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[9]);
}

// ===================================================================

TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse() {}
TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ActorComponentStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ActorComponentStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ActorComponentStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[10]);
}

// ===================================================================

TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse() {}
TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_SceneComponentStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_SceneComponentStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_SceneComponentStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[11]);
}

// ===================================================================

TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse() {}
TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[12]);
}

// ===================================================================

TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse() {}
TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[13]);
}

// ===================================================================

TestRepChannelData_TestNPCStatesEntry_DoNotUse::TestRepChannelData_TestNPCStatesEntry_DoNotUse() {}
TestRepChannelData_TestNPCStatesEntry_DoNotUse::TestRepChannelData_TestNPCStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_TestNPCStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_TestNPCStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_TestNPCStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[14]);
}

// ===================================================================

class TestRepChannelData::_Internal {
 public:
  static const ::unrealpb::GameStateBase& gamestate(const TestRepChannelData* msg);
  static const ::tpspb::TestRepGameState& testgamestate(const TestRepChannelData* msg);
};

const ::unrealpb::GameStateBase&
TestRepChannelData::_Internal::gamestate(const TestRepChannelData* msg) {
  return *msg->_impl_.gamestate_;
}
const ::tpspb::TestRepGameState&
TestRepChannelData::_Internal::testgamestate(const TestRepChannelData* msg) {
  return *msg->_impl_.testgamestate_;
}
void TestRepChannelData::clear_gamestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
}
void TestRepChannelData::clear_actorstates() {
  _impl_.actorstates_.Clear();
}
void TestRepChannelData::clear_pawnstates() {
  _impl_.pawnstates_.Clear();
}
void TestRepChannelData::clear_characterstates() {
  _impl_.characterstates_.Clear();
}
void TestRepChannelData::clear_playerstates() {
  _impl_.playerstates_.Clear();
}
void TestRepChannelData::clear_controllerstates() {
  _impl_.controllerstates_.Clear();
}
void TestRepChannelData::clear_playercontrollerstates() {
  _impl_.playercontrollerstates_.Clear();
}
void TestRepChannelData::clear_actorcomponentstates() {
  _impl_.actorcomponentstates_.Clear();
}
void TestRepChannelData::clear_scenecomponentstates() {
  _impl_.scenecomponentstates_.Clear();
}
void TestRepChannelData::clear_staticmeshcomponentstates() {
  _impl_.staticmeshcomponentstates_.Clear();
}
TestRepChannelData::TestRepChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestRepChannelData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tpspb.TestRepChannelData)
}
TestRepChannelData::TestRepChannelData(const TestRepChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepChannelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.actorstates_)*/{}
    , /*decltype(_impl_.pawnstates_)*/{}
    , /*decltype(_impl_.characterstates_)*/{}
    , /*decltype(_impl_.playerstates_)*/{}
    , /*decltype(_impl_.controllerstates_)*/{}
    , /*decltype(_impl_.playercontrollerstates_)*/{}
    , /*decltype(_impl_.actorcomponentstates_)*/{}
    , /*decltype(_impl_.scenecomponentstates_)*/{}
    , /*decltype(_impl_.staticmeshcomponentstates_)*/{}
    , /*decltype(_impl_.testrepplayercontrollerstates_)*/{}
    , /*decltype(_impl_.testnpcstates_)*/{}
    , decltype(_impl_.gamestate_){nullptr}
    , decltype(_impl_.testgamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.actorstates_.MergeFrom(from._impl_.actorstates_);
  _this->_impl_.pawnstates_.MergeFrom(from._impl_.pawnstates_);
  _this->_impl_.characterstates_.MergeFrom(from._impl_.characterstates_);
  _this->_impl_.playerstates_.MergeFrom(from._impl_.playerstates_);
  _this->_impl_.controllerstates_.MergeFrom(from._impl_.controllerstates_);
  _this->_impl_.playercontrollerstates_.MergeFrom(from._impl_.playercontrollerstates_);
  _this->_impl_.actorcomponentstates_.MergeFrom(from._impl_.actorcomponentstates_);
  _this->_impl_.scenecomponentstates_.MergeFrom(from._impl_.scenecomponentstates_);
  _this->_impl_.staticmeshcomponentstates_.MergeFrom(from._impl_.staticmeshcomponentstates_);
  _this->_impl_.testrepplayercontrollerstates_.MergeFrom(from._impl_.testrepplayercontrollerstates_);
  _this->_impl_.testnpcstates_.MergeFrom(from._impl_.testnpcstates_);
  if (from._internal_has_gamestate()) {
    _this->_impl_.gamestate_ = new ::unrealpb::GameStateBase(*from._impl_.gamestate_);
  }
  if (from._internal_has_testgamestate()) {
    _this->_impl_.testgamestate_ = new ::tpspb::TestRepGameState(*from._impl_.testgamestate_);
  }
  // @@protoc_insertion_point(copy_constructor:tpspb.TestRepChannelData)
}

inline void TestRepChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.actorstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.pawnstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.characterstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.playerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.controllerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.playercontrollerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.actorcomponentstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.scenecomponentstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.staticmeshcomponentstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.testrepplayercontrollerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.testnpcstates_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.gamestate_){nullptr}
    , decltype(_impl_.testgamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestRepChannelData::~TestRepChannelData() {
  // @@protoc_insertion_point(destructor:tpspb.TestRepChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestRepChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actorstates_.Destruct();
  _impl_.actorstates_.~MapField();
  _impl_.pawnstates_.Destruct();
  _impl_.pawnstates_.~MapField();
  _impl_.characterstates_.Destruct();
  _impl_.characterstates_.~MapField();
  _impl_.playerstates_.Destruct();
  _impl_.playerstates_.~MapField();
  _impl_.controllerstates_.Destruct();
  _impl_.controllerstates_.~MapField();
  _impl_.playercontrollerstates_.Destruct();
  _impl_.playercontrollerstates_.~MapField();
  _impl_.actorcomponentstates_.Destruct();
  _impl_.actorcomponentstates_.~MapField();
  _impl_.scenecomponentstates_.Destruct();
  _impl_.scenecomponentstates_.~MapField();
  _impl_.staticmeshcomponentstates_.Destruct();
  _impl_.staticmeshcomponentstates_.~MapField();
  _impl_.testrepplayercontrollerstates_.Destruct();
  _impl_.testrepplayercontrollerstates_.~MapField();
  _impl_.testnpcstates_.Destruct();
  _impl_.testnpcstates_.~MapField();
  if (this != internal_default_instance()) delete _impl_.gamestate_;
  if (this != internal_default_instance()) delete _impl_.testgamestate_;
}

void TestRepChannelData::ArenaDtor(void* object) {
  TestRepChannelData* _this = reinterpret_cast< TestRepChannelData* >(object);
  _this->_impl_.actorstates_.Destruct();
  _this->_impl_.pawnstates_.Destruct();
  _this->_impl_.characterstates_.Destruct();
  _this->_impl_.playerstates_.Destruct();
  _this->_impl_.controllerstates_.Destruct();
  _this->_impl_.playercontrollerstates_.Destruct();
  _this->_impl_.actorcomponentstates_.Destruct();
  _this->_impl_.scenecomponentstates_.Destruct();
  _this->_impl_.staticmeshcomponentstates_.Destruct();
  _this->_impl_.testrepplayercontrollerstates_.Destruct();
  _this->_impl_.testnpcstates_.Destruct();
}
void TestRepChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestRepChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actorstates_.Clear();
  _impl_.pawnstates_.Clear();
  _impl_.characterstates_.Clear();
  _impl_.playerstates_.Clear();
  _impl_.controllerstates_.Clear();
  _impl_.playercontrollerstates_.Clear();
  _impl_.actorcomponentstates_.Clear();
  _impl_.scenecomponentstates_.Clear();
  _impl_.staticmeshcomponentstates_.Clear();
  _impl_.testrepplayercontrollerstates_.Clear();
  _impl_.testnpcstates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.testgamestate_ != nullptr) {
    delete _impl_.testgamestate_;
  }
  _impl_.testgamestate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.GameStateBase gameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ActorState> actorStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.actorstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.PawnState> pawnStates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pawnstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.CharacterState> characterStates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.characterstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.PlayerState> playerStates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ControllerState> controllerStates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.controllerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playercontrollerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.actorcomponentstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.scenecomponentstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.StaticMeshComponentState> staticMeshComponentStates = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.staticmeshcomponentstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tpspb.TestRepGameState testGameState = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_testgamestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .tpspb.TestRepPlayerControllerState> testRepPlayerControllerStates = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.testrepplayercontrollerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .tpspb.TestNPCState> testNPCStates = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.testnpcstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestRepChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gamestate(this),
        _Internal::gamestate(this).GetCachedSize(), target, stream);
  }

  // map<uint32, .unrealpb.ActorState> actorStates = 2;
  if (!this->_internal_actorstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ActorState>;
    using WireHelper = TestRepChannelData_ActorStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_actorstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.PawnState> pawnStates = 3;
  if (!this->_internal_pawnstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::PawnState>;
    using WireHelper = TestRepChannelData_PawnStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pawnstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.CharacterState> characterStates = 4;
  if (!this->_internal_characterstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::CharacterState>;
    using WireHelper = TestRepChannelData_CharacterStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_characterstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.PlayerState> playerStates = 5;
  if (!this->_internal_playerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::PlayerState>;
    using WireHelper = TestRepChannelData_PlayerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.ControllerState> controllerStates = 6;
  if (!this->_internal_controllerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ControllerState>;
    using WireHelper = TestRepChannelData_ControllerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_controllerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 7;
  if (!this->_internal_playercontrollerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::PlayerControllerState>;
    using WireHelper = TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playercontrollerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 8;
  if (!this->_internal_actorcomponentstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ActorComponentState>;
    using WireHelper = TestRepChannelData_ActorComponentStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_actorcomponentstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 9;
  if (!this->_internal_scenecomponentstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::SceneComponentState>;
    using WireHelper = TestRepChannelData_SceneComponentStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_scenecomponentstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.StaticMeshComponentState> staticMeshComponentStates = 10;
  if (!this->_internal_staticmeshcomponentstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::StaticMeshComponentState>;
    using WireHelper = TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_staticmeshcomponentstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // .tpspb.TestRepGameState testGameState = 20;
  if (this->_internal_has_testgamestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::testgamestate(this),
        _Internal::testgamestate(this).GetCachedSize(), target, stream);
  }

  // map<uint32, .tpspb.TestRepPlayerControllerState> testRepPlayerControllerStates = 21;
  if (!this->_internal_testrepplayercontrollerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::tpspb::TestRepPlayerControllerState>;
    using WireHelper = TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_testrepplayercontrollerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .tpspb.TestNPCState> testNPCStates = 22;
  if (!this->_internal_testnpcstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::tpspb::TestNPCState>;
    using WireHelper = TestRepChannelData_TestNPCStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_testnpcstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestRepChannelData)
  return target;
}

size_t TestRepChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestRepChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .unrealpb.ActorState> actorStates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actorstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >::const_iterator
      it = this->_internal_actorstates().begin();
      it != this->_internal_actorstates().end(); ++it) {
    total_size += TestRepChannelData_ActorStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.PawnState> pawnStates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pawnstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >::const_iterator
      it = this->_internal_pawnstates().begin();
      it != this->_internal_pawnstates().end(); ++it) {
    total_size += TestRepChannelData_PawnStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.CharacterState> characterStates = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_characterstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >::const_iterator
      it = this->_internal_characterstates().begin();
      it != this->_internal_characterstates().end(); ++it) {
    total_size += TestRepChannelData_CharacterStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.PlayerState> playerStates = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >::const_iterator
      it = this->_internal_playerstates().begin();
      it != this->_internal_playerstates().end(); ++it) {
    total_size += TestRepChannelData_PlayerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.ControllerState> controllerStates = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controllerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >::const_iterator
      it = this->_internal_controllerstates().begin();
      it != this->_internal_controllerstates().end(); ++it) {
    total_size += TestRepChannelData_ControllerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playercontrollerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >::const_iterator
      it = this->_internal_playercontrollerstates().begin();
      it != this->_internal_playercontrollerstates().end(); ++it) {
    total_size += TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actorcomponentstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >::const_iterator
      it = this->_internal_actorcomponentstates().begin();
      it != this->_internal_actorcomponentstates().end(); ++it) {
    total_size += TestRepChannelData_ActorComponentStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scenecomponentstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >::const_iterator
      it = this->_internal_scenecomponentstates().begin();
      it != this->_internal_scenecomponentstates().end(); ++it) {
    total_size += TestRepChannelData_SceneComponentStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.StaticMeshComponentState> staticMeshComponentStates = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_staticmeshcomponentstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::StaticMeshComponentState >::const_iterator
      it = this->_internal_staticmeshcomponentstates().begin();
      it != this->_internal_staticmeshcomponentstates().end(); ++it) {
    total_size += TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .tpspb.TestRepPlayerControllerState> testRepPlayerControllerStates = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testrepplayercontrollerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tpspb::TestRepPlayerControllerState >::const_iterator
      it = this->_internal_testrepplayercontrollerstates().begin();
      it != this->_internal_testrepplayercontrollerstates().end(); ++it) {
    total_size += TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .tpspb.TestNPCState> testNPCStates = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testnpcstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tpspb::TestNPCState >::const_iterator
      it = this->_internal_testnpcstates().begin();
      it != this->_internal_testnpcstates().end(); ++it) {
    total_size += TestRepChannelData_TestNPCStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gamestate_);
  }

  // .tpspb.TestRepGameState testGameState = 20;
  if (this->_internal_has_testgamestate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testgamestate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepChannelData::GetClassData() const { return &_class_data_; }


void TestRepChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepChannelData*>(&to_msg);
  auto& from = static_cast<const TestRepChannelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestRepChannelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actorstates_.MergeFrom(from._impl_.actorstates_);
  _this->_impl_.pawnstates_.MergeFrom(from._impl_.pawnstates_);
  _this->_impl_.characterstates_.MergeFrom(from._impl_.characterstates_);
  _this->_impl_.playerstates_.MergeFrom(from._impl_.playerstates_);
  _this->_impl_.controllerstates_.MergeFrom(from._impl_.controllerstates_);
  _this->_impl_.playercontrollerstates_.MergeFrom(from._impl_.playercontrollerstates_);
  _this->_impl_.actorcomponentstates_.MergeFrom(from._impl_.actorcomponentstates_);
  _this->_impl_.scenecomponentstates_.MergeFrom(from._impl_.scenecomponentstates_);
  _this->_impl_.staticmeshcomponentstates_.MergeFrom(from._impl_.staticmeshcomponentstates_);
  _this->_impl_.testrepplayercontrollerstates_.MergeFrom(from._impl_.testrepplayercontrollerstates_);
  _this->_impl_.testnpcstates_.MergeFrom(from._impl_.testnpcstates_);
  if (from._internal_has_gamestate()) {
    _this->_internal_mutable_gamestate()->::unrealpb::GameStateBase::MergeFrom(
        from._internal_gamestate());
  }
  if (from._internal_has_testgamestate()) {
    _this->_internal_mutable_testgamestate()->::tpspb::TestRepGameState::MergeFrom(
        from._internal_testgamestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepChannelData::CopyFrom(const TestRepChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestRepChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepChannelData::IsInitialized() const {
  return true;
}

void TestRepChannelData::InternalSwap(TestRepChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actorstates_.InternalSwap(&other->_impl_.actorstates_);
  _impl_.pawnstates_.InternalSwap(&other->_impl_.pawnstates_);
  _impl_.characterstates_.InternalSwap(&other->_impl_.characterstates_);
  _impl_.playerstates_.InternalSwap(&other->_impl_.playerstates_);
  _impl_.controllerstates_.InternalSwap(&other->_impl_.controllerstates_);
  _impl_.playercontrollerstates_.InternalSwap(&other->_impl_.playercontrollerstates_);
  _impl_.actorcomponentstates_.InternalSwap(&other->_impl_.actorcomponentstates_);
  _impl_.scenecomponentstates_.InternalSwap(&other->_impl_.scenecomponentstates_);
  _impl_.staticmeshcomponentstates_.InternalSwap(&other->_impl_.staticmeshcomponentstates_);
  _impl_.testrepplayercontrollerstates_.InternalSwap(&other->_impl_.testrepplayercontrollerstates_);
  _impl_.testnpcstates_.InternalSwap(&other->_impl_.testnpcstates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRepChannelData, _impl_.testgamestate_)
      + sizeof(TestRepChannelData::_impl_.testgamestate_)
      - PROTOBUF_FIELD_OFFSET(TestRepChannelData, _impl_.gamestate_)>(
          reinterpret_cast<char*>(&_impl_.gamestate_),
          reinterpret_cast<char*>(&other->_impl_.gamestate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[15]);
}

// ===================================================================

class TestRepGameState_MulticastNumber_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRepGameState_MulticastNumber_Params>()._impl_._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestRepGameState_MulticastNumber_Params::TestRepGameState_MulticastNumber_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.TestRepGameState_MulticastNumber_Params)
}
TestRepGameState_MulticastNumber_Params::TestRepGameState_MulticastNumber_Params(const TestRepGameState_MulticastNumber_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepGameState_MulticastNumber_Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:tpspb.TestRepGameState_MulticastNumber_Params)
}

inline void TestRepGameState_MulticastNumber_Params::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_){0}
  };
}

TestRepGameState_MulticastNumber_Params::~TestRepGameState_MulticastNumber_Params() {
  // @@protoc_insertion_point(destructor:tpspb.TestRepGameState_MulticastNumber_Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepGameState_MulticastNumber_Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestRepGameState_MulticastNumber_Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepGameState_MulticastNumber_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestRepGameState_MulticastNumber_Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepGameState_MulticastNumber_Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepGameState_MulticastNumber_Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestRepGameState_MulticastNumber_Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 num = 1;
  if (_internal_has_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestRepGameState_MulticastNumber_Params)
  return target;
}

size_t TestRepGameState_MulticastNumber_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestRepGameState_MulticastNumber_Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 num = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepGameState_MulticastNumber_Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepGameState_MulticastNumber_Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepGameState_MulticastNumber_Params::GetClassData() const { return &_class_data_; }


void TestRepGameState_MulticastNumber_Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepGameState_MulticastNumber_Params*>(&to_msg);
  auto& from = static_cast<const TestRepGameState_MulticastNumber_Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestRepGameState_MulticastNumber_Params)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num()) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepGameState_MulticastNumber_Params::CopyFrom(const TestRepGameState_MulticastNumber_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestRepGameState_MulticastNumber_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepGameState_MulticastNumber_Params::IsInitialized() const {
  return true;
}

void TestRepGameState_MulticastNumber_Params::InternalSwap(TestRepGameState_MulticastNumber_Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepGameState_MulticastNumber_Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tpspb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tpspb::TestRepGameState*
Arena::CreateMaybeMessage< ::tpspb::TestRepGameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepGameState >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepPlayerControllerState*
Arena::CreateMaybeMessage< ::tpspb::TestRepPlayerControllerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepPlayerControllerState >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestNPCState*
Arena::CreateMaybeMessage< ::tpspb::TestNPCState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestNPCState >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::EntityChannelData*
Arena::CreateMaybeMessage< ::tpspb::EntityChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::EntityChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_StaticMeshComponentStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_TestRepPlayerControllerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_TestNPCStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepGameState_MulticastNumber_Params*
Arena::CreateMaybeMessage< ::tpspb::TestRepGameState_MulticastNumber_Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepGameState_MulticastNumber_Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
